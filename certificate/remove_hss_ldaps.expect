#!/usr/bin/expect
set SC1_IP_ADDRESS [lindex $argv 0]
set User [lindex $argv 1]
set Password [lindex $argv 2]

spawn ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $User@$SC1_IP_ADDRESS
expect {
    "Are you sure you want to continue connecting (yes/no)?" {
        send "yes\r"
        exp_continue
    }

    "Host key verification failed." {
        exec cp -f $env(HOME)/.ssh/known_hosts $env(HOME)/.ssh/known_hosts.bak
        exec egrep -v "$SC1_IP_ADDRESS ssh-rsa" $env(HOME)/.ssh/known_hosts.bak > $env(HOME)/.ssh/known_hosts
        # exec rm -rf $env(HOME)/.ssh/known_hosts
        spawn ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $User@$SC1_IP_ADDRESS
        expect {
            "Are you sure you want to continue connecting (yes/no)?" {
                send "yes\r"
                exp_continue
            }
            "*assword: " {
                send "$Password\r"
            }

            timeout { exit 1 }
        }
    }

    "*assword: " {
        send "$Password\r"
    }

    timeout { exit 1 }
    }
    expect "*SC-* " {
        send "/opt/com/bin/cliss\r"
    } timeout {

    puts "timeout while entering cliss \n"
    exit 1
    }
    expect ">" { 
        send "ManagedElement=jambala,SystemFunctions=1,SecM=1,CertM=1\r"
    } timeout {
    
        puts "timeout while enter ManagedElement \n"
        exit 1
    }
    expect "(CertM=1)>" {
        send "configure\r"
    } timeout {
    
        puts "timeout while configure \n"
        exit 1
    }
    expect "(config-CertM=1)>" {
        send "commit -s\r"
    } timeout {
        puts "timeout while configure \n"
        exit 1
    }
    expect "(config-CertM=1)>" {
        send "show | filter TrustedCertificate\r"
    } timeout {
        puts "timeout while configure \n"
        exit 1
    }
    expect "(config-CertM=1)>" 
    set output $expect_out(buffer)
    set wordList [regexp -inline -all -- {\S+} $output]
    foreach i $wordList {
       set result [regexp {^TrustedCertificate=(\d+)} $i match zzz]
       if { $result > 0 } {
           send "show ManagedElement=jambala,SystemFunctions=1,SecM=1,CertM=1,$match | filter HssExtDbTLS \r"
           expect "(config-CertM=1)>" 
           set output1 $expect_out(buffer)
           set wordList1 [regexp -inline -all -- {\S+} $output1]
           foreach j $wordList1 {
             set result1 [regexp {(\S+)TrustCategory=HssExtDbTLS(\S+)} $j match1 zzzz]
             if { $result1 > 0 } {
              send "no TrustCategory=HssExtDbTLS\r" 
              expect "(config-CertM=1)>" {
                send "commit -s\r"
              } timeout {
              puts "timeout while configure \n"
              exit 1
              }
              send "removeTrustedCert \"ManagedElement=jambala,SystemFunctions=1,SecM=1,CertM=1,$match\"\r"
              expect "(config-CertM=1)>" {
                send "commit -s\r"
               } timeout {
                puts "timeout while configure \n"
                exit 1
               }
              }
            }
        }        
}
    send "commit\r"

    expect "(CertM=1)>" {
        send "configure\r"
    } timeout {

        puts "timeout while configure \n"
        exit 1
    }
    expect "(config-CertM=1)>" {
        send "commit -s\r"
    } timeout {
        puts "timeout while configure \n"
        exit 1
    }
    expect "(config-CertM=1)>" {
        send "no NodeCredential=HssExtDbTLS\r"
    } timeout {
        puts "timeout while configure \n"
        exit 1
    }
    expect "(config-CertM=1)>" {
        send "commit\r"
    } timeout {
        puts "timeout while configure \n"
        exit 1
    }

expect "(CertM=1)>" {
    send "exit\r"
} timeout {

    puts "timeout while configure \n"
    exit 1
}
expect "*SC-* " {
    send "exit\r"
} timeout {
    puts "timeout while exit sc1 \n"
    exit 1
}

expect "logout*" {
} timeout {

    puts "timeout while exit sc1 \n"
    exit 1
}

exit 0
